{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://github.com/independentid/IDQL-specs/schema/idql.schema.json",
  "title": "IDQL Policy",
  "description": "Schema for IDQL Policy statements",
  "type": "object",
  "required": ["id","subjects","actions","objects"],
  "properties": {
    "id": {
      "type": "string",
      "description": "A unique identifier for the policy"
    },
    "meta": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "Optional DateTime per Section 7 of RFC7159"
        },
        "app": {
          "type": "string",
          "description": "An app identifier to link related policies together for an application"
        },
        "vers": {
          "type": "string",
          "description": "A version identifier to distinguish different policy versions"
        },
        "disp": {
          "type": "string",
          "description": "A human readable description of the policy"
        },
        "layer": {
          "type": "string",
          "description": "An identifier to allow grouping of policies (e.g. Network, App, Data)"
        }
      }
    },
    "subjects": {
      "type": "array",
      "items": {
        "properties": {
          "condition": {
            "description": "A condition that may be applied to limit subject matches for a source",
            "$ref": "https://github.com/independentid/IDQL-specs/schema/idql-condition.schema.json"
          },
          "subType": {
            "enum": ["any","basic","jwt","idp","ref","net","other"],
            "description": "The subject type which is one of any|basic|jwt|idp|ref|net|other"
          },
          "allOf": [
            {
              "$comment": "This validates type subject type 'basic'.",
              "if": {
                "properties": { "subType": { "const": "basic" }},
                "required": ["subType"]
              },
              "then": {
                "properties": {
                  "authId" : {
                    "type": "string",
                    "description": "The identifier of a provider that does HTTP Basic Authentication"
                  }
                }
              }
            },

            {
              "$comment": "This validates a JWT (e.g. OAuth2) based authorization",
              "if": {
                "properties": { "subType":  {"const":  "jwt"}},
                "required": ["subType"]
              },
              "then": {
                "properties": {
                  "authId" : {
                    "type": "string",
                    "description": "The identifier of a provider that does JWT validation"
                  }
                }
              }
            },

            {
              "$comment": "This validates a authorization based on OIDC or SAML IDP provider",
              "if": {
                "properties": { "subType":  {"const":  "idp"}},
                "required": ["subType"]
              },
              "then": {
                "properties": {
                  "authId" : {
                    "type": "string",
                    "description": "The identifier of an OIDC Provider"
                  }
                }
              }
            },

            {
              "$comment": "This validates a authorization based subject URI",
              "if": {
                "properties": { "subType":  {"const":  "ref"}},
                "required": ["subType"]
              },
              "then": {
                "properties": {
                  "ref" : {
                    "type": "string",
                    "description": "The URI of a subject",
                    "format": "uri-reference"
                  }
                }
              }
            },

            {
              "$comment": "This validates a authorization based on a network mask(s)",
              "if": {
                "properties": { "subType":  {"const":  "net"}},
                "required": ["subType"]
              },
              "then": {
                "properties": {
                  "cidr" : {
                    "description": "A list of CIDR values to be accepted",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "$comment": "IP address matches based in an IPv4 CIDR",
                      "pattern": "^(([01]?\\d?\\d|2[0-4]\\d|25[0-5])\\.){3}([01]?\\d?\\d|2[0-4]\\d|25[0-5])\/(\\d{1}|[0-2]{1}\\d{1}|3[0-2])$"
                    }
                  }
                }
              }
            },

            {
              "$comment": "This validates a authorization OTHER provider",
              "if": {
                "properties": { "subType":  {"const":  "other"}},
                "required": ["subType"]
              },
              "then": {
                "properties": {
                  "authId" : {
                    "type": "string",
                    "description": "The identifier of an OIDC Provider"
                  }
                }
              }
            }
          ]
        }
      },
      "minItems": 1
    },

    "actions": {
      "type": "array",
      "items": {
        "properties": {
          "name" : {
            "type": "string",
            "description": "A human readable name for the action"
          },
          "actionUri": {
            "type": "string",
            "format": "uri"
          },
          "condition": {
            "description": "A condition that may be applied to limit matches for a particular action",
            "$ref": "https://github.com/independentid/IDQL-specs/schema/idql-condition.schema.json"
          },
         "required": ["actionUri"]
        }
      }
    },

    "objects": {
      "$comment": "Objects are the things upon which a policy is applied.",
      "type": "array",
      "minItems": 1,
      "items": {
        "properties": {
          "assetId": {
            "type": "string",
            "description": "The identifier of an asset that is protected by policy"
          },
          "pathSpec": {
            "type": "string",
            "description": "A path specification (may include wildcards)",
            "format": "uri-reference"
          },
          "pathRegEx": {
            "type": "string",
            "description": "A regex expression used to match a request path",
            "format": "regex"
          },
          "condition": {
            "description": "A condition that may be applied to limit matches for a particular action",
            "$ref": "https://github.com/independentid/IDQL-specs/schema/idql-condition.schema.json"
          },
          "required": ["assetId"]
        }
      }
    }
  }
}